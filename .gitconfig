[user]
	name = Naoyoshi Aikawa
	email = n.aikawa91@gmail.com
[color]
  ui = auto
[alias]
  amend = commit --amend -C HEAD
  co = checkout
  logg = log --stat --decorate=short --pretty=format:'%C(yellow)%h %Cgreen%cr %Cblue%cn%Cred%d %Creset%s %C(cyan)%b'
  mergelog = log --merges --pretty=format:'%C(yellow)%h %Cgreen%ci %Cblue%cn%Cred%d %Creset%s %C(cyan)%b'
  releaselog = log --merges --pretty=format:'- %C(cyan)\"%b\" %Creset%s %Cred%d'
  history = log --graph --date=short --decorate=short --pretty=format:'%C(yellow)%h %Cgreen%cd %Cblue%cn%Cred%d %Creset%s'
  unmerged = !git --no-pager diff --name-only --diff-filter=U
  default-branch = !git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
  sync = "!f(){ \
    set -e; \
    MASTER=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's@^origin/@@'); \
    [ -z \"$MASTER\" ] && MASTER=main; \
    git fetch -p origin; \
    git switch \"$MASTER\" 2>/dev/null || git checkout \"$MASTER\"; \
    git pull --ff-only origin \"$MASTER\"; \
    merged=$(git for-each-ref refs/heads --format='%(refname:short)' --merged \"$MASTER\" | grep -v \"^$MASTER$\"); \
    [ -z \"$merged\" ] && { echo \"No merged branches.\"; exit 0; }; \
    for br in $merged; do \
      git worktree list --porcelain | \
        awk -v b=\"$br\" '/^worktree /{wt=substr($0,10)} /^branch /{x=$2; sub(\"refs/heads/\",\"\",x); if(x==b){print wt}}' | \
        while IFS= read -r wt; do \
          [ -z \"$wt\" ] && continue; \
          echo \"Removing worktree: $wt (branch: $br)\"; \
          if ! git worktree remove \"$wt\"; then \
            echo \"Skip removing $wt (has changes/untracked).\"; \
          fi; \
        done; \
      echo \"Deleting branch: $br\"; \
      if ! git branch -d \"$br\"; then \
        echo \"Skip deleting $br (still checked out or not fully merged).\"; \
      fi; \
    done; \
  }; f"
	ghprune = "!MASTER=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's@^origin/@@'); [ -z \"$MASTER\" ] && MASTER=main; git fetch -p origin && git for-each-ref 'refs/remotes/origin' --format='%(refname:short)' --merged \"origin/$MASTER\" | grep -v -E \"^origin/($MASTER|HEAD)$\" | sed 's%^origin/%%' | xargs -n1 -I{} sh -c 'echo Deleting remote branch: {}; git push origin \":{}\" || echo \"Skip {} (protected or permission denied)\"'"
  ghprune-dry = "!MASTER=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's@^origin/@@'); [ -z \"$MASTER\" ] && MASTER=main; git fetch -p origin && git for-each-ref 'refs/remotes/origin' --format='%(refname:short)' --merged \"origin/$MASTER\" | grep -v -E \"^origin/($MASTER|HEAD)$\" | sed 's%^origin/%%'"
  ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"
	showpr = "!f() { git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1; }; f"
	openpr = "!f() { gh browse -- `git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1 | cut -f5 -d' ' | sed -e 's%#%%'`; }; f"
  cm = "!f() { \
      add_flag=''; \
      while [ $# -gt 0 ]; do \
          case $1 in \
              -a|--all) add_flag='-u' ;; \
              -A) add_flag='-A' ;; \
          esac; \
          shift; \
      done; \
      [ -n \"$add_flag\" ] && git add $add_flag; \
      if [ -z \"$(git diff --staged)\" ]; then \
          echo 'No staged changes'; \
          return 1; \
      fi; \
      context=\"Recent commit messages in this project:\n\"; \
      context+=$(git log --oneline -10 --pretty=format:'- %s'); \
      context+=\"\n\nCurrent changes:\n\"; \
      context+=$(git diff --staged); \
      additional_prompt=''; \
      while true; do \
          prompt='Generate a commit message following the project style. If no clear pattern exists, use conventional commits. Output ONLY one-line title. No explanations'; \
          if [ -n \"$additional_prompt\" ]; then \
              prompt=\"$prompt $additional_prompt\"; \
          fi; \
          msg=$(echo \"$context\" | claude -p \"$prompt\" --system-prompt \"Act as git commit writer\" ); \
          echo \"Generated: $msg\"; \
          read -p 'Use this message? [Y/n/e/r=regenerate with prompt] (default: y) ' choice; \
          [ -z "$choice" ] && choice=y; \
          case $choice in \
              y) git commit -m \"$msg\"; break ;; \
              e) git commit -e -m \"$msg\"; break ;; \
              n) echo 'Cancelled'; break ;; \
              r) \
                  read -p 'Additional instructions (e.g., \"make it shorter\", \"add more detail\", \"mention the bug fix\"): ' additional_prompt; \
                  continue ;; \
              *) echo 'Please choose y/n/e/r'; continue ;; \
          esac; \
      done; \
  }; f"
[core]
  editor = emacs
[mergetool "diffmerge"]
  cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
  trustExitCode = true
[merge]
  tool = diffmerge
[mergetool]
  keepBackup = false
[diff]
  tool = diffmerge
[difftool "diffmerge"]
  cmd = diffmerge $LOCAL $REMOTE
[push]
  default = current
[credential]
  helper = osxkeychain
[ghq]
  root = ~/src
[url "git@github.com:"]
  insteadOf = https://github.com/
[mailmap]
	file = ~/.mailmap
[github]
	user = awakia
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[pull]
	rebase = false
[init]
	defaultBranch = main
